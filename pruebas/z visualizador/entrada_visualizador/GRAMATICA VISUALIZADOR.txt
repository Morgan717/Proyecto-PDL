///// GRAMATICA VISUALIZADOR 

Terminales = { boolean function if input int output return string var void while cte cad id %= = , ; ( ) { } + && == eof else }

NoTerminales = { START SEN DECL DECLX ASIGN EXP EXPX VAL WHILE_LOOP IF_STMT IF_STMTX OUTPUT_STMT INPUT_STMT RETURN_STMT RETURN_STMTX FUNC_DEF PARAMS PARAMSX BODY TIPO TIPOX }

Axioma = START

Producciones = {
START -> SEN START
START -> FUNC_DEF START 
START -> eof
SEN -> DECL ;
SEN -> ASIGN ;
SEN -> WHILE_LOOP
SEN -> IF_STMT
SEN -> OUTPUT_STMT ;
SEN -> INPUT_STMT ;
SEN -> RETURN_STMT ;
DECL -> var TIPO id DECLX
DECLX -> ASIGN
DECLX -> lambda
ASIGN -> %= EXP
ASIGN -> = EXP
EXP -> VAL EXPX
EXPX -> + EXP
EXPX -> && EXP
EXPX -> == EXP
EXPX -> lambda
VAL -> id
VAL -> cte
VAL -> cad
WHILE_LOOP -> while ( EXP ) { BODY }
IF_STMT -> if ( EXP ) { BODY } IF_STMTX
IF_STMTX -> else { BODY }
IF_STMTX -> lambda
BODY -> SEN BODY
BODY -> lambda
OUTPUT_STMT -> output  EXP 
INPUT_STMT -> input  id 
RETURN_STMT -> return RETURN_STMTX
RETURN_STMTX -> EXP
RETURN_STMTX -> lambda
FUNC_DEF -> function TIPOX id ( PARAMS ) { BODY }
PARAMS -> TIPO id PARAMSX
PARAMS -> lambda
PARAMSX -> , TIPO id PARAMSX
PARAMSX -> lambda
TIPO -> int
TIPO -> string
TIPO -> boolean
TIPOX -> int
TIPOX -> string
TIPOX -> boolean
TIPOX -> void
}
