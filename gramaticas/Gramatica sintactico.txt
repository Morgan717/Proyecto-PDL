Terminales (Tokens) = { boolean function if else input int output return string var void while cte cad id %= = , ; ( ) { } + && == eof }

NoTerminales = { START, SEN, DECL, DECLX, ASIGN, ASIGNX, EXP, EXPX, VAL, BLOQUE, WHILE_LOOP, IF_STMT, IF_STMTX, OUTPUT_STMT, INPUT_STMT, RETURN_STMT, RETURN_STMTX, FUNC_DEF, PARAMS, PARAMSX, BODY, OP_ARIT, OP_LOG, OP_REL, TIPO, TIPOX }

Axioma = START

Producciones = {
START -> SEN START 	1
START -> FUNC_DEF START 2
START -> eof		3


SEN -> DECL ;		4 
SEN -> GESTOR ;		5
SEN -> WHILE_LOOP	6
SEN -> IF_STMT		7
SEN -> OUTPUT_STMT ;	8
SEN -> INPUT_STMT ;	9
SEN -> RETURN_STMT ;	10


DECL -> var TIPO id DECLX 11


DECLX -> ASIGN		12
DECLX -> lambda		13


ASIGN -> %= EXP		14
ASIGN -> = EXP		15


EXP -> VAL EXPX  	16


EXPX -> + EXP		17
EXPX -> && EXP		18
EXPX -> == EXP		19
EXPX -> lambda 		20

VAL -> id VALX  21
VAL -> cte		22
VAL -> cad		23
VALX -> FUNC_CALL 24
VALX -> lambda 25


WHILE_LOOP -> while ( EXP ) { BODY }	26


IF_STMT -> if ( EXP ) { BODY } IF_STMTX	27


IF_STMTX -> else { BODY }	28
IF_STMTX -> lambda		29


BODY -> SEN BODY	30
BODY -> lambda		31


OUTPUT_STMT -> output EXP	32


INPUT_STMT -> input id	33


RETURN_STMT -> return RETURN_STMTX	34


RETURN_STMTX -> EXP	35
RETURN_STMTX -> lambda	36


FUNC_DEF -> function TIPOX id ( PARAMS ) { BODY }	37


PARAMS -> TIPO id PARMSX	38
PARAMS -> lambda 		    39


PARAMSX -> , TIPO id PARMSX 	40
PARAMSX -> lambda 		41


TIPO -> int		    42
TIPO -> string		43
TIPO -> boolean		44


TIPOX -> int		45
TIPOX -> string		46
TIPOX -> boolean	47
TIPOX -> void		48

GESTOR -> id GESTORX  	49
GESTORX -> ASIGN	    50
GESTORX -> FUNC_CALL	51
FUNC_CALL -> ( ARGUMENTOS )	52

ARGUMENTOS -> VAL ARGUMENTOSX 53
ARGUMENTOS -> lambda 54

ARGUMENTOSX -> , VAL ARGUMENTOSX 55
ARGUMENTOSX -> lambda            56

}